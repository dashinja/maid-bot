{"version":3,"sources":["../../server/controllers/apiController.js"],"names":["express","require","apiController","Router","db","route","get","req","res","send","post","Bot","create","name","body","botType","workDone","attack","defense","speed","then","result","console","log","dataValues","catch","err","findOne","attributes","order","limit","json","newValue","update","where","botName","module","exports"],"mappings":"AAAA,MAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,MAAMC,gBAAgBF,QAAQG,MAAR,EAAtB;AACA,MAAMC,KAAKH,QAAQ,WAAR,CAAX;;AAEAC,cAAcG,KAAd,CAAoB,MAApB,EAA4BC,GAA5B,CAAgC,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5CA,MAAIC,IAAJ,CAAS,IAAT;AACD,CAFD;;AAIAP,cAAcG,KAAd,CAAoB,OAApB,EAA6BK,IAA7B,CAAkC,CAACH,GAAD,EAAMC,GAAN,KAAc;AAC9CJ,KAAGO,GAAH,CAAOC,MAAP,CAAc;AACZC,UAAMN,IAAIO,IAAJ,CAASD,IADH;AAEZE,aAASR,IAAIO,IAAJ,CAASC,OAFN;AAGZC,cAAUT,IAAIO,IAAJ,CAASE,QAHP;AAIZC,YAAQV,IAAIO,IAAJ,CAASG,MAJL;AAKZC,aAASX,IAAIO,IAAJ,CAASI,OALN;AAMZC,WAAOZ,IAAIO,IAAJ,CAASK;AANJ,GAAd,EAQGC,IARH,CAQQC,UAAU;AACdC,YAAQC,GAAR,CAAYF,OAAOG,UAAnB;AACD,GAVH,EAWGC,KAXH,CAWSC,OAAOJ,QAAQC,GAAR,CAAYG,GAAZ,CAXhB;AAYAlB,MAAIC,IAAJ,CAASF,IAAIO,IAAb;AACD,CAdD;;AAgBAZ,cAAcG,KAAd,CAAoB,YAApB,EAAkCC,GAAlC,CAAsC,CAACC,GAAD,EAAMC,GAAN,KAAc;AAClDJ,KAAGO,GAAH,CAAOgB,OAAP,CAAe;AACbC,gBAAY,CAAC,MAAD,EAAS,SAAT,EAAoB,UAApB,CADC;AAEbC,WAAO,CAAC,CAAC,UAAD,EAAa,MAAb,CAAD,CAFM;AAGbC,WAAO;AAHM,GAAf,EAKGV,IALH,CAKQC,UAAU;AACd,QAAIA,WAAW,IAAf,EAAqB;AACnBb,UAAIC,IAAJ,CAAS,KAAT;AACD,KAFD,MAEO;AACLD,UAAIuB,IAAJ,CAASV,MAAT;AACD;AACF,GAXH,EAYGI,KAZH,CAYSC,OAAOJ,QAAQC,GAAR,CAAYG,GAAZ,CAZhB;AAaD,CAdD;;AAgBAxB,cAAcG,KAAd,CAAoB,YAApB,EAAkCK,IAAlC,CAAuC,CAACH,GAAD,EAAMC,GAAN,KAAc;AACnDc,UAAQC,GAAR,CAAY,mBAAZ,EAAiChB,IAAIO,IAAJ,CAASE,QAA1C;;AAEA,QAAMgB,WAAW,EAAEhB,UAAUT,IAAIO,IAAJ,CAASE,QAAT,GAAoB,CAAhC,EAAjB;AACAM,UAAQC,GAAR,CAAY,oBAAZ,EAAkCS,SAAShB,QAA3C;AACAZ,KAAGO,GAAH,CAAOsB,MAAP,CAAcD,QAAd,EAAwB;AACtBE,WAAO;AACLrB,YAAMN,IAAIO,IAAJ,CAASqB;AADV;AADe,GAAxB,EAIGf,IAJH,CAIQC,UAAU;AAChBC,YAAQC,GAAR,CAAY,gBAAZ,EAA8BF,MAA9B;AACAb,QAAIC,IAAJ,CAASY,MAAT;AACD,GAPD;AAQD,CAbD;;AAeAe,OAAOC,OAAP,GAAiBnC,aAAjB","file":"apiController.js","sourcesContent":["const express = require('express')\r\nconst apiController = express.Router()\r\nconst db = require('../models')\r\n\r\napiController.route('/bot').get((req, res) => {\r\n  res.send('hi')\r\n})\r\n\r\napiController.route('/bot/').post((req, res) => {\r\n  db.Bot.create({\r\n    name: req.body.name,\r\n    botType: req.body.botType,\r\n    workDone: req.body.workDone,\r\n    attack: req.body.attack,\r\n    defense: req.body.defense,\r\n    speed: req.body.speed,\r\n  })\r\n    .then(result => {\r\n      console.log(result.dataValues)\r\n    })\r\n    .catch(err => console.log(err))\r\n  res.send(req.body)\r\n})\r\n\r\napiController.route('/bot/score').get((req, res) => {\r\n  db.Bot.findOne({\r\n    attributes: ['name', 'botType', 'workDone'],\r\n    order: [['workDone', 'DESC']],\r\n    limit: 1,\r\n  })\r\n    .then(result => {\r\n      if (result === null) {\r\n        res.send('N/A')\r\n      } else {\r\n        res.json(result)\r\n      }\r\n    })\r\n    .catch(err => console.log(err))\r\n})\r\n\r\napiController.route('/bot/score').post((req, res) => {\r\n  console.log('req.body.workDone', req.body.workDone)\r\n\r\n  const newValue = { workDone: req.body.workDone + 5 }\r\n  console.log('newvalue.workDone:', newValue.workDone)\r\n  db.Bot.update(newValue, {\r\n    where: {\r\n      name: req.body.botName,\r\n    },\r\n  }).then(result => {\r\n    console.log('Updated to by:', result)\r\n    res.send(result)\r\n  })\r\n})\r\n\r\nmodule.exports = apiController\r\n"]}