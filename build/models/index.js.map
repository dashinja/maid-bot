{"version":3,"sources":["../../server/models/index.js"],"names":["fs","require","path","Sequelize","basename","__filename","env","process","NODE_ENV","config","__dirname","db","sequelize","use_env_variable","database","username","password","readdirSync","filter","file","indexOf","slice","forEach","model","join","name","Object","keys","modelName","associate","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,MAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,MAAME,YAAYF,QAAQ,WAAR,CAAlB;AACA,MAAMG,WAAWF,KAAKE,QAAL,CAAcC,UAAd,CAAjB;AACA,MAAMC,MAAMC,QAAQD,GAAR,CAAYE,QAAZ,IAAwB,aAApC;AACA,MAAMC,SAASR,QAAQS,YAAY,wBAApB,EAA8CJ,GAA9C,CAAf;AACA,MAAMK,KAAK,EAAX;;AAEA,IAAIC,SAAJ;AACA,IAAIH,OAAOI,gBAAX,EAA6B;AAC3BD,cAAY,IAAIT,SAAJ,CAAcI,QAAQD,GAAR,CAAYG,OAAOI,gBAAnB,CAAd,EAAoDJ,MAApD,CAAZ;AACD,CAFD,MAEO;AACLG,cAAY,IAAIT,SAAJ,CAAcM,OAAOK,QAArB,EAA+BL,OAAOM,QAAtC,EAAgDN,OAAOO,QAAvD,EAAiEP,MAAjE,CAAZ;AACD;;AAEDT,GACGiB,WADH,CACeP,SADf,EAEGQ,MAFH,CAEUC,QAAQ;AACd,SAAQA,KAAKC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IAA8BD,SAASf,QAAvC,IAAqDe,KAAKE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAA/E;AACD,CAJH,EAKGC,OALH,CAKWH,QAAQ;AACf,QAAMI,QAAQX,UAAU,QAAV,EAAoBV,KAAKsB,IAAL,CAAUd,SAAV,EAAqBS,IAArB,CAApB,CAAd;AACAR,KAAGY,MAAME,IAAT,IAAiBF,KAAjB;AACD,CARH;;AAUAG,OAAOC,IAAP,CAAYhB,EAAZ,EAAgBW,OAAhB,CAAwBM,aAAa;AACnC,MAAIjB,GAAGiB,SAAH,EAAcC,SAAlB,EAA6B;AAC3BlB,OAAGiB,SAAH,EAAcC,SAAd,CAAwBlB,EAAxB;AACD;AACF,CAJD;;AAMAA,GAAGC,SAAH,GAAeA,SAAf;AACAD,GAAGR,SAAH,GAAeA,SAAf;;AAEA2B,OAAOC,OAAP,GAAiBpB,EAAjB","file":"index.js","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst Sequelize = require('sequelize');\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV || 'development';\nconst config = require(__dirname + '/../config/config.json')[env];\nconst db = {};\n\nlet sequelize;\nif (config.use_env_variable) {\n  sequelize = new Sequelize(process.env[config.use_env_variable], config);\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\n\nfs\n  .readdirSync(__dirname)\n  .filter(file => {\n    return (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js');\n  })\n  .forEach(file => {\n    const model = sequelize['import'](path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach(modelName => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nmodule.exports = db;\n"]}